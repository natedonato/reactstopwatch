{"version":3,"sources":["stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["Stopwatch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","seconds","minutes","interval","handleStart","bind","assertThisInitialized","tick","handleStop","handleReset","handleStopAndReset","setInterval","setState","clearInterval","string","react_default","a","createElement","className","stringify","onClick","href","React","Component","App","stopwatch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAiGeA,cA9FX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,EACTC,QAAS,EACTC,SAAU,MAGdV,EAAKW,YAAcX,EAAKW,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,CAAAD,IACnBA,EAAKc,KAAOd,EAAKc,KAAKF,KAAVX,OAAAY,EAAA,EAAAZ,CAAAD,IACZA,EAAKe,WAAaf,EAAKe,WAAWH,KAAhBX,OAAAY,EAAA,EAAAZ,CAAAD,IAClBA,EAAKgB,YAAchB,EAAKgB,YAAYJ,KAAjBX,OAAAY,EAAA,EAAAZ,CAAAD,IACnBA,EAAKiB,mBAAqBjB,EAAKiB,mBAAmBL,KAAxBX,OAAAY,EAAA,EAAAZ,CAAAD,IAZXA,6EAgBf,IAAIG,KAAKI,MAAMG,SAAf,CAGI,IAAIA,EAAWQ,YAAYf,KAAKW,KAAM,KACtCX,KAAKgB,SAAS,CACVT,mDAMJP,KAAKI,MAAMG,WACXU,cAAcjB,KAAKI,MAAMG,UACzBP,KAAKgB,SAAS,CACVT,SAAU,8CAMlBP,KAAKgB,SAAS,CACVX,QAAS,EACTC,QAAS,iDAKbN,KAAKY,aACLZ,KAAKa,6CAIL,IAAIR,EAAUL,KAAKI,MAAMC,QACrBC,EAAUN,KAAKI,MAAME,SACzBD,GAAW,GACG,KACVA,EAAU,EACVC,GAAW,GAEfN,KAAKgB,SAAS,CACVX,UACAC,gDAKJ,IAAIY,EAAS,GACTZ,EAAUN,KAAKI,MAAME,QACrBD,EAAUL,KAAKI,MAAMC,QAYzB,OAVIa,GADAZ,EAAU,EACAA,EAEA,IAAMA,EAEpBY,GAAU,IAENA,GADAb,EAAU,EACAA,EAEA,IAAMA,mCAMpB,OACAc,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,cAAMrB,KAAKuB,YAAX,KACAJ,EAAAC,EAAAC,cAAA,UAAQG,QAAWxB,KAAKQ,aAAxB,WACAW,EAAAC,EAAAC,cAAA,UAAQG,QAAWxB,KAAKY,YAAxB,UACAO,EAAAC,EAAAC,cAAA,UAAQG,QAAWxB,KAAKa,aAAxB,WACAM,EAAAC,EAAAC,cAAA,UAAQG,QAAWxB,KAAKc,oBAAxB,oBACAK,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,KAAII,KAAO,iDAAX,oDAzFYC,IAAMC,WCUfC,MARf,WACE,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7eb8c7bd.chunk.js","sourcesContent":["import React from 'react';\n\nclass Stopwatch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 0,\n            minutes: 0,\n            interval: null\n        };\n\n        this.handleStart = this.handleStart.bind(this);\n        this.tick = this.tick.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handleStopAndReset = this.handleStopAndReset.bind(this);\n    }\n\n    handleStart() {\n        if (this.state.interval) {\n            return;\n        } else {\n            let interval = setInterval(this.tick, 1000);\n            this.setState({\n                interval\n            });\n        }\n    }\n\n    handleStop() {\n        if (this.state.interval) {\n            clearInterval(this.state.interval);\n            this.setState({\n                interval: null\n            });\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            seconds: 0,\n            minutes: 0\n        });\n    }\n\n    handleStopAndReset() {\n        this.handleStop();\n        this.handleReset();\n    }\n\n    tick() {\n        let seconds = this.state.seconds;\n        let minutes = this.state.minutes;\n        seconds += 1;\n        if (seconds > 59) {\n            seconds = 0;\n            minutes += 1;\n        }\n        this.setState({\n            seconds,\n            minutes\n        })\n    }\n\n    stringify() {\n        let string = \"\";\n        let minutes = this.state.minutes;\n        let seconds = this.state.seconds;\n        if (minutes > 9) {\n            string += minutes;\n        } else {\n            string += \"0\" + minutes;\n        }\n        string += \":\";\n        if (seconds > 9) {\n            string += seconds;\n        } else {\n            string += \"0\" + seconds;\n        }\n        return string;\n    }\n\n    render() {\n        return ( \n        <div className = \"stopwatch\">\n            <h1> {this.stringify()} </h1> \n            <button onClick = {this.handleStart} > Start </button> \n            <button onClick = {this.handleStop} > Stop </button> \n            <button onClick = {this.handleReset} > Reset </button> \n            <button onClick = {this.handleStopAndReset}> Stop And Reset </button> \n            <p> By Nate Donato</p>\n            < a href = \"https://github.com/natedonato/reactstopwatch/\"> View source and documentation on Github</a>\n        </div>\n        );\n    }\n}\n\nexport default Stopwatch;","import React from 'react';\nimport './App.css';\nimport Stopwatch from './stopwatch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stopwatch />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}