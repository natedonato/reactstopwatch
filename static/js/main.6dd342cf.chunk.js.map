{"version":3,"sources":["stopwatch.js","stopwatchesContainer.js","App.js","serviceWorker.js","index.js"],"names":["Stopwatch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","seconds","minutes","interval","started","handleStart","bind","assertThisInitialized","tick","handleStop","handleReset","toggleStart","clearInterval","setInterval","setState","string","buttontext","buttonColor","react_default","a","createElement","className","onClick","removeTimer","id","stringify","Fragment","React","Component","StopwatchesContainer","addTimer","timers","lastId","length","push","filter","el","_this2","map","stopwatch","key","style","height","width","display","justifyContent","alignItems","App","stopwatchesContainer","padding","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6dd342cf.chunk.js","sourcesContent":["import React from 'react';\n\nclass Stopwatch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 0,\n            minutes: 0,\n            interval: null,\n            started: false,\n        };\n\n        this.handleStart = this.handleStart.bind(this);\n        this.tick = this.tick.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.toggleStart = this.toggleStart.bind(this);\n    }\n\n    componentWillUnmount(){\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n\n    toggleStart(){\n        if(this.state.interval){\n            this.handleStop();\n        }else{\n            this.handleStart();\n        }\n    }\n\n    handleStart() {\n        if (this.state.interval) {\n            return;\n        } else {\n            let interval = setInterval(this.tick, 1000);\n            this.setState({\n                interval,\n                started: true\n            });\n        }\n    }\n\n    handleStop() {\n        if (this.state.interval) {\n            clearInterval(this.state.interval);\n            this.setState({\n                interval: null\n            });\n        }\n    }\n\n    handleReset() {\n        this.handleStop();\n        this.setState({\n            seconds: 0,\n            minutes: 0,\n            started: false\n        });\n    }\n\n    tick() {\n        let seconds = this.state.seconds;\n        let minutes = this.state.minutes;\n        seconds += 1;\n        if (seconds > 59) {\n            seconds = 0;\n            minutes += 1;\n        }\n        this.setState({\n            seconds,\n            minutes\n        });\n    }\n\n    stringify() {\n        let string = \"\";\n        let minutes = this.state.minutes;\n        let seconds = this.state.seconds;\n        if (minutes > 9) {\n            string += minutes;\n        } else {\n            string += \"0\" + minutes;\n        }\n        string += \":\";\n        if (seconds > 9) {\n            string += seconds;\n        } else {\n            string += \"0\" + seconds;\n        }\n        return string;\n    }\n\n    render() {\n        let buttontext = this.state.interval ? \"STOP\" : \"RESUME\";\n        let buttonColor = this.state.interval ? \"RED\" : \"GREEN\";\n\n        return ( \n        <div className = \"stopwatch\">\n            < button className = 'x' onClick = {this.props.removeTimer} > X </button>\n            <div> Timer #{this.props.id + 1}\n            </div>\n            <h1> {this.stringify()} </h1> \n\n            <div className = 'timerControls'>\n                {this.state.started ? \n                <>\n                    <button className={buttonColor} onClick = {this.toggleStart}>{buttontext}</button>\n                    < button onClick = {this.handleReset} > RESET < /button>\n                </> \n                : < button onClick = {this.handleStart} > START </button> }\n            </div>\n\n           \n        </div>\n        );\n    }\n}\n\nexport default Stopwatch;","import React from 'react';\nimport Stopwatch from './stopwatch';\n\nclass StopwatchesContainer extends React.Component{\n    constructor(props){\n        super(props);\n        const timers = [0];\n        this.state = {timers};\n\n    }\n\n    addTimer = () => {\n        let timers = this.state.timers;\n\n        let lastId = timers[timers.length - 1];\n        if(timers.length === 0){\n            lastId = -1;\n        }\n\n        timers.push(lastId + 1);\n        this.setState({timers});\n    }\n\n    removeTimer = (id) => {\n        let timers = this.state.timers;\n        timers = timers.filter( el => el !== id);\n        this.setState({timers});\n    }\n\n    render(){\n        const timers = this.state.timers.map( id =>\n            <Stopwatch key={id} id={id} removeTimer={()=>this.removeTimer(id)}/>\n            );\n\n        return(\n        <>\n            {timers}\n            <div style={{height: '140px', width: '60px', display: 'flex', justifyContent: 'center', alignItems: 'center'}}> \n                <button onClick = {this.addTimer} className=\"addButton\"> + ADD</button>\n            </div>\n        </>\n        )\n    }\n}\n\nexport default StopwatchesContainer;","import React from 'react';\nimport './App.css';\nimport Stopwatch from './stopwatch';\nimport StopwatchesContainer from './stopwatchesContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StopwatchesContainer />\n      <div className = \"footer\">\n        <span style={{padding: '5px'}}> Simple React timers by Nate Donato</span>\n        < a href = \"https://github.com/natedonato/reactstopwatch/\"> View source on Github</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}